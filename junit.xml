<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="86" time="0.175" timestamp="2024-12-18T14:47:40.225118+05:30" hostname="Vinit-Kumar.local"><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_namespaces" time="0.001" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_xmlns_namespaces" time="0.001" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_xsi_location" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_xsi_xmlns" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_item_wrap_true" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_item_wrap_false" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_flat" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_omit_list" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_val_and_custom_attr" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_ampersand" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_ampsersand_and_attrs" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_list_items_with_attrs" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_make_id" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_get_unique_id" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_key_is_valid_xml" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_get_xml_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_is_primitive_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_escape_xml" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_wrap_cdata" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_parent_elements" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_str_list_header" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_headers" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_headers_nested" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_headers_root" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_no_root" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_root" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_custom_root" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_item_func" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_with_item_func_issue_151" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_issue_151" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dict2xml_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_get_xml_type_number" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_convert_datetime" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_basic_conversion" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_with_type_attribute" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_with_custom_attributes" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_valid_key" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_convert_kv_with_cdata" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_convert_kv_with_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_make_valid_xml_name_with_invalid_key" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_convert_bool_with_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_convert_none_with_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_make_valid_xml_name_with_numeric_key" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_escape_xml_with_special_chars" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_get_xml_type_with_sequence" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_get_xml_type_with_none" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_dicttoxml_with_xml_namespaces" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_datetime_conversion" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_to_xml_with_primitive_items" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_to_xml_with_dict_items" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_to_xml_with_mixed_items" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_to_xml_with_empty_list" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_list_to_xml_with_special_characters" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_datetime_conversion_with_isoformat" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_date_conversion_with_isoformat" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_datetime_conversion_with_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_date_conversion_with_attr_type" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_datetime_conversion_with_custom_attributes" time="0.000" /><testcase classname="tests.test_dict2xml.TestDict2xml" name="test_date_conversion_with_custom_attributes" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_json" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_invalid_json" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_invalid_json2" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_jsonstring" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_invalid_string1" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_invalid_string2" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_from_invalid_jsonstring" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_json_to_xml_conversion" time="0.001" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_json_to_xml_empty_data_conversion" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_custom_wrapper_and_indent" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_no_wrapper" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_item_wrap" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_no_item_wrap" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_empty_array" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_attrs" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_dicttoxml_bug" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_bad_data" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_boolean_data_from_json" time="0.001" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_read_boolean_data_from_json2" time="0.001" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_dict_attr_crash" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_encoding_pretty_print" time="0.000" /><testcase classname="tests.test_json2xml.TestJson2xml" name="test_encoding_without_pretty_print" time="0.000" /><testcase classname="tests.test_xml_escape.TestEscaping" name="test_escaping" time="0.000" /><testcase classname="tests.test_xml_escape.TestEscaping" name="test_escapes_angle_brackets" time="0.001"><failure message="assert '&quot;HelpText&quot;: &quot;version &amp;lt;here&amp;gt;&quot;' in '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;all&gt;\n\t&lt;item type=&quot;str&quot;&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;HelpText&amp;quot;: &amp;quot;version &amp;lt;here&amp;gt;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'">self = &lt;tests.test_xml_escape.TestEscaping object at 0x1051b4aa0&gt;

    def test_escapes_angle_brackets(self):
        json_data = json.dumps({"root": {"@attrs": {"HelpText": "version &lt;here&gt;"}}})
        result = json2xml.Json2xml(json_data).to_xml()
&gt;       assert '"HelpText": "version &amp;lt;here&amp;gt;"' in result
E       assert '"HelpText": "version &amp;lt;here&amp;gt;"' in '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;all&gt;\n\t&lt;item type="str"&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;HelpText&amp;quot;: &amp;quot;version &amp;lt;here&amp;gt;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'

tests/test_xml_escape.py:39: AssertionError</failure></testcase><testcase classname="tests.test_xml_escape.TestEscaping" name="test_escapes_quotes" time="0.001"><failure message="assert '&quot;Text&quot;: &quot;\\&quot;quoted\\&quot;&quot;' in '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;all&gt;\n\t&lt;item type=&quot;str&quot;&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;\\&amp;quot;quoted\\&amp;quot;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'">self = &lt;tests.test_xml_escape.TestEscaping object at 0x1051b4740&gt;

    def test_escapes_quotes(self):
        json_data = json.dumps({"root": {"@attrs": {"Text": "\"quoted\""}}})
        result = json2xml.Json2xml(json_data).to_xml()
&gt;       assert '"Text": "\\"quoted\\""' in result
E       assert '"Text": "\\"quoted\\""' in '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;all&gt;\n\t&lt;item type="str"&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;\\&amp;quot;quoted\\&amp;quot;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'

tests/test_xml_escape.py:44: AssertionError</failure></testcase><testcase classname="tests.test_xml_escape.TestEscaping" name="test_escapes_ampersands" time="0.004"><failure message="assert '&quot;Text&quot;: &quot;this &amp;amp; that&quot;' in '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;all&gt;\n\t&lt;item type=&quot;str&quot;&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;this &amp;amp; that&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'">self = &lt;tests.test_xml_escape.TestEscaping object at 0x1051b42f0&gt;

    def test_escapes_ampersands(self):
        json_data = json.dumps({"root": {"@attrs": {"Text": "this &amp; that"}}})
        result = json2xml.Json2xml(json_data).to_xml()
&gt;       assert '"Text": "this &amp;amp; that"' in result
E       assert '"Text": "this &amp;amp; that"' in '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;all&gt;\n\t&lt;item type="str"&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;this &amp;amp; that&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'

tests/test_xml_escape.py:49: AssertionError</failure></testcase><testcase classname="tests.test_xml_escape.TestEscaping" name="test_escapes_mixed_special_chars" time="0.001"><failure message="assert '&quot;Text&quot;: &quot;&amp;lt;tag&amp;gt; &amp;amp; \\&quot;quote\\&quot;&quot;' in '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;all&gt;\n\t&lt;item type=&quot;str&quot;&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;&amp;lt;tag&amp;gt; &amp;amp; \\&amp;quot;quote\\&amp;quot;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'">self = &lt;tests.test_xml_escape.TestEscaping object at 0x1051b5730&gt;

    def test_escapes_mixed_special_chars(self):
        json_data = json.dumps({"root": {"@attrs": {"Text": "&lt;tag&gt; &amp; \"quote\""}}})
        result = json2xml.Json2xml(json_data).to_xml()
&gt;       assert '"Text": "&amp;lt;tag&amp;gt; &amp;amp; \\"quote\\""' in result
E       assert '"Text": "&amp;lt;tag&amp;gt; &amp;amp; \\"quote\\""' in '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;all&gt;\n\t&lt;item type="str"&gt;{&amp;quot;root&amp;quot;: {&amp;quot;@attrs&amp;quot;: {&amp;quot;Text&amp;quot;: &amp;quot;&amp;lt;tag&amp;gt; &amp;amp; \\&amp;quot;quote\\&amp;quot;&amp;quot;}}}&lt;/item&gt;\n&lt;/all&gt;\n'

tests/test_xml_escape.py:54: AssertionError</failure></testcase></testsuite></testsuites>